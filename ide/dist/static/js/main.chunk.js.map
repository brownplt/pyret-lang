{"version":3,"file":"static/js/main.chunk.js","sources":["/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/node_modules/babel-core/lib/transformation/file sync","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/node_modules/babel-core/lib/transformation/file/options sync","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/App.css","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/index.css","webpack:///./src/App.css?498e","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/App.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/DefChunks.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Dropdown.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/FSBrowser.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/FontSize.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Footer.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Header.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Image.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Interaction.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/InteractionError.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Menu.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/SingleCodeMirrorDefinitions.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/Table.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/backend.ts","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/browserfs-setup.ts","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/control.ts","webpack:///./src/index.css?e32c","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/index.tsx","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/path.ts","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/runner.ts","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/runtime-loader.ts","/mnt/c/users/andro/Desktop/cs5152/pyret-lang/ide/src/serviceWorker.js"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/babel-core/lib/transformation/file sync recursive\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/babel-core/lib/transformation/file/options sync recursive\";","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"html, body, #root {\\n    height: 100%;\\n    margin: 0;\\n}\\n\\n.page-container {\\n    height: 100%;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.header-container {\\n    height: 2.7em;\\n    background: #c8c8c8;\\n    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.6);\\n    flex: none;\\n    position: relative;\\n    z-index: 10;\\n}\\n\\n.run-container {\\n    height: 100%;\\n    display: flex;\\n    flex-direction: row;\\n    float: right;\\n}\\n\\n.run-options {\\n    width: 1.5em;\\n    text-align: center;\\n    border: none;\\n    font-family: sans-serif;\\n    font-size: 16px;\\n    text-indent: -0.2em;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    background: #317bcf;\\n    color: #fff;\\n}\\n\\nbutton::-moz-focus-inner {\\n    border: none;\\n}\\n\\n.stop-available {\\n    height: 100%;\\n    cursor: pointer;\\n    border: none;\\n    transition: box-shadow 0.2s;\\n    width: 12em;\\n    float: right;\\n    background: #cf3b31;\\n    color: #fff;\\n}\\n\\n.stop-unavailable {\\n    height: 100%;\\n    cursor: pointer;\\n    border: none;\\n    width: 12em;\\n    float: right;\\n    background: none;\\n    color: rgba(0, 0, 0, 0.26);\\n}\\n\\n.menu {\\n    height: 100%;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    width: 6em;\\n    float: left;\\n    background: rgba(0,0,0,0.3);\\n    color: #fff;\\n    border: none;\\n}\\n\\n.run-ready {\\n    height: 100%;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    width: 12em;\\n    float: right;\\n    background: #317bcf;\\n    color: #fff;\\n    border: none;\\n    border-right: 2px solid rgba(0, 0, 0, 0.26);\\n}\\n\\n.run-queued {\\n    height: 100%;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    width: 12em;\\n    float: right;\\n    background: none;\\n    color: rgba(0, 0, 0, 0.26);\\n    border: none;\\n    border-right: 2px solid rgba(0, 0, 0, 0.26);\\n}\\n\\n.run-option-disabled {\\n    height: 2.7em;\\n    cursor: pointer;\\n    border: none;\\n    transition: box-shadow 0.2s;\\n    width: 100%;\\n    background: #c8c8c8;\\n    color: rgba(0, 0, 0, 0.26);\\n    display: flex;\\n    justify-content: flex-start;\\n}\\n\\n.run-option-label {\\n    text-align: center;\\n    line-height: 3em;\\n    font-family: sans-serif;\\n    font-size: 14px;\\n    padding-left: 1em;\\n    cursor: pointer;\\n    -webkit-user-select: none;\\n       -moz-user-select: none;\\n            user-select: none;\\n}\\n\\n.run-option-enabled {\\n    height: 2.7em;\\n    cursor: pointer;\\n    border: none;\\n    transition: box-shadow 0.2s;\\n    width: 100%;\\n    background: #317bcf;\\n    color: #fff;\\n    display: flex;\\n    justify-content: flex-start;\\n    text-align: center;\\n}\\n\\n.run-option-enabled:focus, .run-option-disabled:focus, .run-ready:focus, .run-queued:focus, .run-options:focus, .stop-available:focus, .stop-unavailable:focus, .menu:focus, .menu-content-button:focus {\\n    outline: none;\\n}\\n\\n.interaction-error {\\n    background: rgb(255, 202, 202);\\n    height: 100%;\\n}\\n\\n.run-option-enabled:hover, .run-ready:hover, .run-options:hover {\\n    box-shadow: 0px -5px 10px 5px rgba(0, 0, 0, 0.2);\\n    background: #0060ce;\\n}\\n\\n.stop-available:hover {\\n    box-shadow: 0px -5px 10px 5px rgba(0, 0, 0, 0.2);\\n    background: #b30c00;\\n}\\n\\n.run-option-disabled:hover, .run-queued:hover, .menu:hover, .menu-content-button:hover, .fs-browser-item:hover, .font-label:hover, .font-minus:hover, .font-plus:hover {\\n    box-shadow: 0px -5px 10px 5px rgba(0, 0, 0, 0.2);\\n    background: rgba(0, 0, 0, 0.6);\\n}\\n\\n.run-option-checkbox {\\n    margin: 0 0 0 1em;\\n    margin-top: 1em;\\n    padding: 0;\\n    float: left;\\n    cursor: pointer;\\n    width: 1em;\\n    height: 1em;\\n}\\n\\n.code-container {\\n    height: calc(100% - 5.4em);\\n    width: 100%;\\n    display: flex;\\n    flex-direction: row;\\n}\\n\\n.edit-area-container {\\n    height: 100%;\\n}\\n\\n.splitter-layout {\\n    position: relative !important;\\n}\\n\\n.splitter-layout > .layout-splitter {\\n    width: 0.5em !important;\\n    border: 1px solid #a6a6a6;\\n    background: linear-gradient(to right, #bfbfbf 0%, #d9d9d9 40%, #d9d9d9 60%, #bfbfbf 100%);\\n}\\n\\n.splitter-layout.splitter-layout-vertical > .layout-splitter {\\n    width: auto !important;\\n    height: 0.5em !important;\\n    background: linear-gradient(to top, #bfbfbf 0%, #d9d9d9 40%, #d9d9d9 60%, #bfbfbf 100%);\\n}\\n\\n.footer-container {\\n    height: 2.7em;\\n    background: #111;\\n    flex: none;\\n    color: #fff;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.run-dropdown {\\n    position: absolute;\\n    right: 10em;\\n    top: 2.7em;\\n    width: 11.5em;\\n    display: flex;\\n    flex-direction: column;\\n    z-index: 1;\\n    border-top: 1px solid rgba(0, 0, 0, 1);\\n}\\n\\n.react-codemirror2 {\\n    height: 100%;\\n}\\n\\n.CodeMirror {\\n    min-height: 100% !important;\\n    border: none !important;\\n}\\n\\n.interactions-area-container {\\n    height: 100%;\\n    display: flex;\\n    flex-flow: column;\\n}\\n\\n.interactions-area {\\n    font-family: monospace;\\n    margin: 0;\\n    padding: 0;\\n    margin-bottom: 1em;\\n    overflow-y: scroll;\\n}\\n\\n.interaction {\\n    display: flex;\\n    flex-direction: row;\\n    padding: 1em;\\n    padding-bottom: 0;\\n}\\n\\n.interaction-identifier {\\n    margin: 0;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.interaction-error {\\n    background: rgb(255, 202, 202);\\n}\\n\\n.menu-content-button {\\n    border: none;\\n    height: 2.7em;\\n    background: rgba(0, 0, 0, 0.3);\\n    color: #fff;\\n}\\n\\n.fs-browser-item {\\n    border: none;\\n    height: 2.7em;\\n    background: rgba(0, 0, 0, 0.3);\\n    color: #fff;\\n    text-align: left;\\n    flex: none;\\n}\\n\\n.font-size-options {\\n    display: flex;\\n    flex-direction: row;\\n}\\n\\n.font-label {\\n    flex-grow: 2;\\n    border: none;\\n    background: rgba(0, 0, 0, 0.3);\\n    color: #fff;\\n}\\n\\n.font-minus {\\n    border: none;\\n    width: 2.7em;\\n    background: rgba(0, 0, 0, 0.3);\\n    color: #fff;\\n}\\n\\n.font-plus {\\n    border: none;\\n    width: 2.7em;\\n    background: rgba(0, 0, 0, 0.3);\\n    color: #fff;\\n}\\n\\n.font-size-options {\\n    height: 2.7em;\\n}\\n\\n.table-copy {\\n    cursor: pointer;\\n    position: absolute;\\n    padding: 0.5em;\\n    z-index: 1;\\n}\\n\\n.table-container .table-copy {\\n    opacity: 0;\\n}\\n\\n.table-container:hover .table-copy {\\n    opacity: 1;\\n}\\n\\n.styled-background {\\n    background-color: rgb(134, 134, 245);\\n}\\n\\n.styled-background-error {\\n    background-color: rgb(255, 202, 202);\\n}\\n\\n.ReactTable {\\n    overflow: auto;\\n}\\n\\n.menu-container {\\n    display: flex;\\n    flex-direction: row;\\n    background: #c8c8c8;\\n}\\n\\n.menu-tab-inactive {\\n    font-size: 2em;\\n    padding: 0.25em;\\n}\\n\\n.menu-tab-active {\\n    font-size: 2em;\\n    padding: 0.25em;\\n    background: rgba(0, 0, 0, 0.6);\\n}\\n\\n.menu-content {\\n    background: #c8c8c8;\\n    height: 100%;\\n    width: 16em;\\n    display: flex;\\n    flex-direction: column;\\n    box-shadow: 1px 0px 2px rgba(0, 0, 0, 0.6);\\n    position: relative;\\n    z-index: 5;\\n    overflow-y: scroll;\\n}\\n\", \"\"]);\n\n","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"\", \"\"]);\n\n","var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (module.hot) {\n  if (!content.locals) {\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\",\n      function () {\n        var newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.id, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}","import React from 'react';\nimport './App.css';\nimport { Interaction } from './Interaction';\nimport { DefChunks } from './DefChunks';\nimport { SingleCodeMirrorDefinitions } from './SingleCodeMirrorDefinitions';\nimport { Menu, Tab } from './Menu';\nimport { Footer } from './Footer';\nimport { FontSize } from './FontSize';\nimport { FSBrowser } from './FSBrowser';\nimport { Dropdown, DropdownOption } from './Dropdown';\nimport { Header } from './Header';\nimport { InteractionError } from './InteractionError';\nimport * as control from './control';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\n\ncontrol.installFileSystem();\ncontrol.loadBuiltins();\n\nenum EEditor {\n    Chunks,\n    Text,\n}\n\ntype AppProps = {};\ntype AppState = {};\n\nfunction makeResult(result: any, compiledJSONPath: string): { name: string, value: any }[] {\n    const programJSON = JSON.parse(\n        control.bfsSetup.fs.readFileSync(compiledJSONPath));\n\n    const providedValues = programJSON.provides.values;\n    const providedValuesKeys = Object.keys(programJSON.provides.values);\n\n    const insertLineNumber = (key: string) => {\n        const column =\n            providedValues[key].origin[\"local-bind-site\"][1];\n        return { line: column, name: key, value: result[key] };\n    };\n\n    type Result = {\n        line: number,\n        name: string,\n        value: any,\n    };\n\n    const compareResults = (a: Result, b: Result): number => {\n        if (a.line < b.line) {\n            return -1;\n        } else if (a.line > b.line) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    if (providedValuesKeys.length !== 0) {\n        // we have source location information for bindings, so we sort them\n        // based on which column they are bound on\n        return providedValuesKeys\n            .map(insertLineNumber)\n            .sort(compareResults);\n    } else {\n        // we do not have source location information for bindings, so we sort\n        // them alphabetically by identifier name\n        return Object.keys(result).sort().map((key) => {\n            return {\n                name: key,\n                value: result[key]\n            }\n        });\n    }\n}\n\ntype LintFailure = {\n    name: string,\n    errors: string[]\n}\n\ntype EditorProps = {\n    browseRoot: string;\n    browsePath: string[];\n    currentFileDirectory: string[];\n    currentFileName: string;\n};\n\ntype EditorState = {\n    browseRoot: string;\n    browsePath: string[];\n    currentFileDirectory: string[];\n    currentFileName: string;\n    currentFileContents: string;\n    typeCheck: boolean;\n    interactions: { name: string, value: any }[];\n    interactionErrors: string[];\n    interactErrorExists: boolean;\n    lintFailures: {[name : string]: LintFailure};\n    runKind: control.backend.RunKind;\n    autoRun: boolean;\n    updateTimer: NodeJS.Timer;\n    dropdownVisible: boolean;\n    fontSize: number;\n    editorMode: EEditor,\n    message: string;\n    definitionsHighlights: number[][];\n    fsBrowserVisible: boolean;\n};\n\nclass Editor extends React.Component<EditorProps, EditorState> {\n    constructor(props: EditorProps) {\n        super(props);\n\n        const onLintFailure = (lintFailure : { name: string, errors: string[]}) => {\n            let newFailures = this.state.lintFailures;\n            const name = lintFailure.name;\n            newFailures[name] = lintFailure;\n            this.setState({ lintFailures: newFailures });\n        }\n        const onLintSuccess = (lintSuccess : { name: string}) => {\n            let newFailures = this.state.lintFailures;\n            const name = lintSuccess.name;\n            if(name in newFailures) { delete newFailures[name]; }\n            this.setState({ lintFailures: newFailures });\n        }\n\n        control.setupWorkerMessageHandler(\n            console.log,\n            (errors: string[]) => {\n                this.setMessage(\"Compilation failed with error(s)\")\n                const places: any = [];\n                for (let i = 0; i < errors.length; i++) {\n                    const matches = errors[i].match(/:\\d+:\\d+-\\d+:\\d+/g);\n                    if (matches !== null) {\n                        matches.forEach((m) => {\n                            places.push(m.match(/\\d+/g)!.map(Number));\n                        });\n                    }\n                }\n                this.setState(\n                    {\n                        interactionErrors: errors,\n                        interactErrorExists: true,\n                        definitionsHighlights: places\n                    }\n                );\n            },\n            (errors: string[]) => {\n                this.setState(\n                    {\n                        interactionErrors: [errors.toString()],\n                        interactErrorExists: true,\n                    }\n                );\n            },\n            onLintFailure,\n            onLintSuccess,\n            () => {\n                this.setMessage(\"Run started\");\n                control.run(\n                    control.path.runBase,\n                    control.path.runProgram,\n                    (runResult: any) => {\n                        console.log(runResult);\n                        if (runResult.result !== undefined) {\n                            if (runResult.result.error === undefined) {\n                                this.setMessage(\"Run completed successfully\");\n\n                                const results =\n                                    makeResult(\n                                        runResult.result,\n                                        control.bfsSetup.path.join(\n                                            control.path.runBase,\n                                            `${this.state.currentFileName}.json`));\n\n                                this.setState({\n                                    interactions: results\n                                });\n\n                                if (results[0].name === \"error\") {\n                                    this.setState(\n                                        {\n                                            interactionErrors: runResult.result.error,\n                                            interactErrorExists: true\n                                        }\n                                    );\n                                }\n                            } else {\n                                this.setMessage(\"Run failed with error(s)\");\n\n                                this.setState({\n                                    interactionErrors: [runResult.result.error],\n                                    interactErrorExists: true\n                                });\n                            }\n                        }\n                    },\n                    this.state.runKind);\n            });\n\n        this.state = {\n            browseRoot: this.props.browseRoot,\n            browsePath: this.props.browsePath,\n            currentFileDirectory: this.props.currentFileDirectory,\n            currentFileName: this.props.currentFileName,\n            currentFileContents: control.openOrCreateFile(\n                control.bfsSetup.path.join(\n                    ...this.props.currentFileDirectory,\n                    this.props.currentFileName)),\n            typeCheck: true,\n            interactions: [{\n                name: \"Note\",\n                value: \"Press Run to compile and run\"\n            }],\n            interactionErrors: [],\n            interactErrorExists: false,\n            lintFailures: {},\n            runKind: control.backend.RunKind.Async,\n            autoRun: true,\n            updateTimer: setTimeout(this.update, 2000),\n            dropdownVisible: false,\n            editorMode: EEditor.Text,\n            fontSize: 12,\n            message: \"Ready to rock\",\n            definitionsHighlights: [],\n            fsBrowserVisible: false,\n        };\n    };\n\n    get isPyretFile() {\n        return /\\.arr$/.test(this.currentFile);\n    }\n\n    get currentFile() {\n        return control.bfsSetup.path.join(\n            ...this.state.currentFileDirectory,\n            this.state.currentFileName);\n    }\n\n    get currentFileName() {\n        return this.state.currentFileName;\n    }\n\n    get currentFileDirectory() {\n        return control.bfsSetup.path.join(...this.state.currentFileDirectory);\n    }\n\n    get stopify() {\n        return this.state.runKind === control.backend.RunKind.Async;\n    }\n\n    run = () => {\n        this.setState(\n            {\n                interactionErrors: [],\n                interactErrorExists: false\n            }\n        );\n        if (this.isPyretFile) {\n            this.setMessage(\"Compilation started\");\n            control.compile(\n                this.currentFileDirectory,\n                this.currentFileName,\n                this.state.typeCheck);\n        } else {\n            this.setMessage(\"Visited a non-pyret file\");\n            this.setState({\n                interactions: [\n                    {\n                        name: \"Error\",\n                        value: \"Run is not supported on this file type\"\n                    },\n                    {\n                        name: \"File\",\n                        value: this.currentFile\n                    }],\n                interactionErrors: [\"Error: Run is not supported on this file type\"],\n                interactErrorExists: true\n            });\n        }\n    };\n\n    update = (): void => {\n        control.fs.writeFileSync(\n            this.currentFile,\n            this.state.currentFileContents);\n        if (this.state.autoRun) {\n            this.run();\n        }\n    }\n\n    onEdit = (value: string): void => {\n        clearTimeout(this.state.updateTimer);\n        this.setState({\n            currentFileContents: value,\n            updateTimer: setTimeout(this.update, 250),\n        });\n    }\n\n    onTraverseDown = (path: string[]) => {\n        this.setState({\n            browsePath: path,\n        });\n    };\n\n    onTraverseUp = (path: string[]) => {\n        this.setState({\n            browsePath: path,\n        });\n    };\n\n    onExpandChild = (child: string, fullChildPath: string): void => {\n        this.setState({\n            interactions: [{\n                name: \"Note\",\n                value: \"Press Run to compile and run\"\n            }],\n            currentFileDirectory: this.state.browsePath,\n            currentFileName: child,\n            currentFileContents: control.fs\n                                        .readFileSync(fullChildPath, \"utf-8\"),\n        });\n    };\n\n    setEditorMode = (editorMode: EEditor) => {\n        this.setState({ editorMode });\n    }\n\n    loadBuiltins = (e: React.MouseEvent<HTMLElement>): void => {\n        control.loadBuiltins();\n    };\n\n    removeRootDirectory = (e: React.MouseEvent<HTMLElement>): void => {\n        control.removeRootDirectory();\n    };\n\n    makeHeaderButton = (text: string, enabled: boolean, onClick: () => void) => {\n        return (\n            <button className={(enabled ? \"run-option-enabled\" : \"run-option-disabled\")}\n                    onClick={onClick}>\n                {text}\n            </button>\n        );\n    };\n\n    toggleDropdownVisibility = (e: any) => {\n        this.setState({\n            dropdownVisible: !this.state.dropdownVisible\n        });\n    };\n\n    toggleAutoRun = () => {\n        this.setState({\n            autoRun: !this.state.autoRun\n        });\n    };\n\n    toggleStopify = () => {\n        if (this.stopify) {\n            this.setState({\n                runKind: control.backend.RunKind.Sync\n            });\n        } else {\n            this.setState({\n                runKind: control.backend.RunKind.Async\n            })\n        }\n    };\n\n    toggleTypeCheck = () => {\n        this.setState({\n            typeCheck: !this.state.typeCheck\n        });\n    };\n\n    onDecreaseFontSize = () => {\n        if (this.state.fontSize > 1) {\n            this.setState({\n                fontSize: this.state.fontSize - 1\n            });\n        }\n    };\n\n    onIncreaseFontSize = () => {\n        this.setState({\n            fontSize: this.state.fontSize + 1\n        });\n    };\n\n    onResetFontSize = () => {\n        this.setState({\n            fontSize: 12\n        });\n    };\n\n    removeDropdown = () => {\n        this.setState({\n            dropdownVisible: false\n        });\n    };\n\n    setMessage = (newMessage: string) => {\n        this.setState({\n            message: newMessage\n        });\n    };\n\n    makeDefinitions() {\n        if (this.state.editorMode === EEditor.Text) {\n            return <SingleCodeMirrorDefinitions\n                text={this.state.currentFileContents}\n                onEdit={this.onEdit}\n                highlights={this.state.definitionsHighlights}\n                interactErrorExists={this.state.interactErrorExists}>\n            </SingleCodeMirrorDefinitions>;\n        }\n        else if (this.state.editorMode === EEditor.Chunks) {\n            return (<DefChunks\n                lintFailures={this.state.lintFailures}\n                name={this.state.currentFileName}\n                highlights={this.state.definitionsHighlights}\n                interactErrorExists={this.state.interactErrorExists}\n                program={this.state.currentFileContents}\n                onEdit={this.onEdit}></DefChunks>);\n        }\n    }\n\n    render() {\n        const interactionValues =\n            <pre className=\"interactions-area\"\n                 style={{ fontSize: this.state.fontSize }}>\n                {\n                    this.state.interactions.map(\n                        (i) => {\n                            return <Interaction key={i.name}\n                                                name={i.name}\n                                                value={i.value}\n                                                setMessage={this.setMessage}/>\n                        })\n                }\n            </pre>;\n\n        const dropdown = this.state.dropdownVisible && (\n            <Dropdown>\n                <DropdownOption enabled={this.state.autoRun}\n                                onClick={this.toggleAutoRun}>\n                    Auto Run\n                </DropdownOption>\n                <DropdownOption enabled={this.stopify}\n                                onClick={this.toggleStopify}>\n                    Stopify\n                </DropdownOption>\n                <DropdownOption enabled={this.state.typeCheck}\n                                onClick={this.toggleTypeCheck}>\n                    Type Check\n                </DropdownOption>\n            </Dropdown>);\n\n        const fsBrowser =\n            <FSBrowser root={this.state.browseRoot}\n                       onTraverseUp={this.onTraverseUp}\n                       onTraverseDown={this.onTraverseDown}\n                       onExpandChild={this.onExpandChild}\n                       browsePath={this.state.browsePath}\n                       key=\"FSBrowser\">\n            </FSBrowser>;\n\n        const fontSize =\n            <FontSize onIncrease={this.onIncreaseFontSize}\n                      onDecrease={this.onDecreaseFontSize}\n                      onReset={this.onResetFontSize}\n                      size={this.state.fontSize}\n                      key=\"FontSize\">\n            </FontSize>;\n\n        const textEditor =\n            <button className=\"text-editor\"\n                    onClick={() => this.setEditorMode(EEditor.Text)}\n                    key=\"TextEditor\">\n                Text\n            </button>;\n\n        const chunkEditor =\n            <button className=\"chunk-editor\"\n                    onClick={() => this.setEditorMode(EEditor.Chunks)}\n                    key=\"ChunkEditor\">\n                Chunks\n            </button>;\n\n        const builtinsLoader =\n            <button onClick={control.loadBuiltins}>\n                Load Builtins\n            </button>;\n\n        const menu =\n            <Menu>\n                <Tab name=\"📁\">\n                    {fsBrowser}\n                </Tab>\n                <Tab name=\"⚙\">\n                    {textEditor}\n                    {chunkEditor}\n                    {builtinsLoader}\n                    {fontSize}\n                </Tab>\n            </Menu>;\n\n        const rightHandSide =\n            <div className=\"interactions-area-container\">\n                {this.state.interactErrorExists ? (\n                    <SplitterLayout vertical={true}\n                                    percentage={true}>\n                        {interactionValues}\n                        <InteractionError fontSize={this.state.fontSize}>\n                            {this.state.interactionErrors}\n                        </InteractionError>\n                    </SplitterLayout>\n                ) : interactionValues}\n            </div>;\n\n        const definitions = this.makeDefinitions();\n\n        return (\n            <div className=\"page-container\">\n                <Header>\n                    {this.stopify ? (\n                        <button className=\"stop-available\">\n                            Stop\n                        </button>\n                    ) : (\n                        <button className=\"stop-unavailable\">\n                            Stop\n                        </button>\n                    )}\n                    <div className=\"run-container\">\n                        <button className=\"run-ready\"\n                                onClick={this.run}>\n                            Run\n                        </button>\n                        <button className=\"run-options\"\n                                onClick={this.toggleDropdownVisibility}\n                                onBlur={this.removeDropdown}>&#8628;{dropdown}\n                        </button>\n                    </div>\n                </Header>\n                <div className=\"code-container\">\n                    {menu}\n                    <SplitterLayout vertical={false}\n                                    percentage={true}>\n                        <div className=\"edit-area-container\"\n                             style={{ fontSize: this.state.fontSize }}>\n                            {definitions}\n                        </div>\n                        {rightHandSide}\n                    </SplitterLayout>\n                </div>\n                <Footer message={this.state.message}></Footer>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    render() {\n        return (\n            <Editor browseRoot=\"/\"\n                    browsePath={[\"/\", \"projects\"]}\n                    currentFileDirectory={[\"/\", \"projects\"]}\n                    currentFileName=\"program.arr\">\n            </Editor>\n        );\n    };\n}\n\nexport default App;\n","import React from 'react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport * as control from './control';\n\ntype DefChunkProps = {\n  name: string,\n  failures: string[],\n  highlights: number[][],\n  index: number,\n  startLine: number,\n  chunk: string,\n  onEdit: (key: number, chunk: string) => void,\n  isLast: boolean\n};\ntype DefChunkState = {\n  editor: CodeMirror.Editor | null,\n  focused: boolean,\n  updateTimer: NodeJS.Timeout\n};\n\nexport class DefChunk extends React.Component<DefChunkProps, DefChunkState> {\n  constructor(props : DefChunkProps) { super(props); this.state = { editor: null, updateTimer: setTimeout(this.lint.bind(this), 0), focused: false,  }; }\n\n  componentWillReceiveProps() {\n    if(this.state.editor !== null) {\n      const marks = this.state.editor.getDoc().getAllMarks();\n      marks.forEach(m => m.clear());\n    }\n  }\n\n  componentDidUpdate() {\n    if(this.state.editor !== null) {\n      const marks = this.state.editor.getDoc().getAllMarks();\n      marks.forEach(m => m.clear());\n      if (this.props.highlights.length > 0) {\n          for (let i = 0; i < this.props.highlights.length; i++) {\n              this.state.editor.getDoc().markText(\n                  { line: this.props.highlights[i][0] - 1 - this.props.startLine,\n                      ch: this.props.highlights[i][1] },\n                  { line: this.props.highlights[i][2] - 1 - this.props.startLine,\n                      ch: this.props.highlights[i][3] },\n                  { className: \"styled-background-error\" });\n          }\n      }\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.state.updateTimer);\n    this.setState({\n        updateTimer: setTimeout(this.lint.bind(this), 250),\n    });\n  }\n  lint() {\n    control.lint(this.props.chunk, this.props.name);\n  }\n  render() {\n    let borderWidth = \"1px\";\n    let borderColor = \"#eee\";\n    let shadow = \"\";\n    if(this.state.focused) { shadow = \"3px 3px 2px #aaa\"; borderWidth = \"2px\"; borderColor = \"black\"; }\n    if(this.props.highlights.length > 0) { borderColor = \"red\"; }\n    const border = borderWidth + \" solid \" + borderColor;\n    return (<div style={{ boxShadow: shadow, border: border, \"paddingTop\": \"0.5em\", \"paddingBottom\": \"0.5em\" }}>\n      <CodeMirror\n        onFocus={(_, __) => {\n          if(this.props.isLast) {\n            this.props.onEdit(this.props.index, \"\");\n          }\n          this.setState({ focused: true })}\n        }\n        onBlur={(_, __) => this.setState({ focused: false })}\n        editorDidMount={(editor, value) => {\n          this.setState({editor: editor});\n          const marks = editor.getDoc().getAllMarks();\n          marks.forEach(m => m.clear());\n          editor.setSize(null, \"auto\");\n        }}\n        value={this.props.chunk}\n        options={{\n          mode: 'pyret',\n          theme: 'default',\n          lineNumbers: true,\n          lineWrapping: true,\n          lineNumberFormatter: (l) => String(l + this.props.startLine)\n        }}\n        onChange={(editor, __, value) => {\n          this.scheduleUpdate();\n          return this.props.onEdit(this.props.index, value)\n        }\n        }\n        autoCursor={false}>\n      </CodeMirror>\n      <ul>\n        {this.props.failures.map((f, ix) => <li key={String(ix)}>{f}</li>)}\n      </ul>\n      </div>);\n  }\n}\n\ntype Chunk = {\n  startLine: number,\n  id: string,\n  text: string\n}\n\ntype LintFailure = {\n    name: string,\n    errors: string[]\n}\n\ntype DefChunksProps = {\n  lintFailures: {[name : string]: LintFailure},\n  highlights: number[][],\n  interactErrorExists: boolean,\n  program: string,\n  name: string,\n  onEdit: (s: string) => void\n};\ntype DefChunksState = {\n  chunks: Chunk[],\n  chunkIndexCounter: number\n};\n\nconst CHUNKSEP = \"#.CHUNK#\\n\";\n\nexport class DefChunks extends React.Component<DefChunksProps, DefChunksState> {\n  constructor(props: DefChunksProps) {\n    super(props);\n    const chunkstrs = this.props.program.split(CHUNKSEP);\n    const chunks : Chunk[] = [];\n    var totalLines = 0;\n    for(let i = 0; i < chunkstrs.length; i += 1) {\n      chunks.push({text: chunkstrs[i], id: String(i), startLine: totalLines})\n      totalLines += chunkstrs[i].split(\"\\n\").length;\n    }\n    this.state = {\n      chunkIndexCounter: chunkstrs.length,\n      chunks\n    }\n  }\n  getStartLineForIndex(chunks : Chunk[], index : number) {\n    if(index === 0) { return 0; }\n    else {\n      return chunks[index - 1].startLine + chunks[index - 1].text.split(\"\\n\").length;\n    }\n  }\n  chunksToString(chunks : Chunk[]) {\n    return chunks.map((c) => c.text).join(CHUNKSEP);\n  }\n  render() {\n    const onEdit = (index: number, text: string) => {\n      let newChunks : Chunk[];\n      if (index === this.state.chunks.length) {\n        const id = String(this.state.chunkIndexCounter);\n        this.setState({chunkIndexCounter: this.state.chunkIndexCounter + 1});\n        newChunks = this.state.chunks.concat([{text, id, startLine: this.getStartLineForIndex(this.state.chunks, this.state.chunks.length)}])\n      }\n      else {\n        newChunks = this.state.chunks.map((p, ix) => {\n          if (ix === index) { return {text, id:p.id, startLine: p.startLine}; }\n          else { return p; }\n        });\n        newChunks = newChunks.map((p, ix) => {\n          if (ix <= index) { return p; }\n          else { return {text: p.text, id: p.id, startLine: this.getStartLineForIndex(newChunks, ix)}; }\n        });\n      }\n      this.setState({chunks: newChunks});\n      this.props.onEdit(this.chunksToString(newChunks));\n    }\n    const onDragEnd = (result: DropResult) => {\n      if(result.destination === null || result.source!.index === result.destination!.index) {\n        return;\n      }\n      else {\n        // Great examples! https://codesandbox.io/s/k260nyxq9v\n        const reorder = (chunks : Chunk[], start : number, end : number) => {\n          const result = Array.from(chunks);\n          const [removed] = result.splice(start, 1);\n          result.splice(end, 0, removed);\n          return result;\n        };\n        if(result.destination === undefined) { return; }\n        let newChunks = reorder(this.state.chunks, result.source.index, result.destination.index);\n        for(let i = 0; i < newChunks.length; i += 1) {\n          const p = newChunks[i];\n          newChunks[i] = {text: p.text, id: p.id, startLine: this.getStartLineForIndex(newChunks, i)};\n        }\n        this.setState({ chunks: newChunks });\n        this.props.onEdit(this.chunksToString(newChunks));\n      }\n    };\n    const endBlankChunk = {text: \"\", id: String(this.state.chunkIndexCounter), startLine: this.getStartLineForIndex(this.state.chunks, this.state.chunks.length)};\n    return (<DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"droppable\">\n        {(provided, snapshot) => {\n          return <div\n            {...provided.droppableProps}\n            ref={provided.innerRef} \n          >{this.state.chunks.concat([endBlankChunk]).map((chunk, index) => {\n            const linesInChunk = chunk.text.split(\"\\n\").length;\n            let highlights : number[][];\n            const name = this.props.name + \"_chunk_\" + chunk.id;\n            let failures : string[] = [];\n            if(name in this.props.lintFailures) {\n              failures = this.props.lintFailures[name].errors;\n            }\n            if(this.props.interactErrorExists) {\n              highlights = this.props.highlights.filter((h) => h[0] > chunk.startLine && h[0] <= chunk.startLine + linesInChunk);\n            }\n            else {\n              highlights = [];\n            }\n            const isLast = index === this.state.chunks.length;\n            return <Draggable key={chunk.id} draggableId={chunk.id} index={index}>\n              {(provided, snapshot) => {\n                return (<div ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}><DefChunk name={name} isLast={isLast} failures={failures} highlights={highlights} startLine={chunk.startLine} key={chunk.id} index={index} chunk={chunk.text} onEdit={onEdit}></DefChunk></div>)\n              }\n              }</Draggable>;\n          })}</div>;\n        }}\n      </Droppable></DragDropContext>);\n  }\n}\n","import React from 'react';\n\nexport type DropdownOptionProps = {\n    enabled: boolean,\n    onClick: () => void,\n};\n\nexport type DropdownOptionState = {};\n\nexport class DropdownOption extends React.Component<DropdownOptionProps, DropdownOptionState> {\n    render() {\n        const internalName = `DropdownOption${new Date().getTime()}`;\n\n        return (\n            <div className={this.props.enabled ? \"run-option-enabled\" : \"run-option-disabled\"}\n                 onClick={this.props.onClick}>\n                <input type=\"checkBox\"\n                       checked={this.props.enabled}\n                       name={internalName}\n                       className=\"run-option-checkbox\"\n                       readOnly={true}>\n                </input>\n                <label htmlFor={internalName}\n                       className=\"run-option-label\">\n                    {this.props.children}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport type DropdownProps = {};\n\nexport type DropdownState = {};\n\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\n    render() {\n        return (\n            <div className=\"run-dropdown\"\n                 onClick={(e) => e.stopPropagation()}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport * as control from './control';\n\ntype FSItemProps = {\n    onClick: () => void;\n    path: string[];\n    selected: boolean;\n};\n\ntype FSItemState = {};\n\nclass FSItem extends React.Component<FSItemProps, FSItemState> {\n    render() {\n        const path = control.bfsSetup.path.join(...this.props.path);\n\n        const stats = control.fs.statSync(path);\n\n        const label = (() => {\n            if (stats.isDirectory()) {\n                return <div>&#x1f4c2;</div>;\n            } else if (stats.isFile()) {\n                return <div>&#128441;</div>;\n            } else {\n                return \"?\";\n            }})();\n\n        const background = this.props.selected ? \"darkgray\": \"rgba(0, 0, 0, 0.3)\";\n\n        return (\n            <button onClick={this.props.onClick}\n                    style={{\n                        background: background,\n                        border: 0,\n                        height: \"2.7em\",\n                        color: \"#fff\",\n                        textAlign: \"left\",\n                        flex: \"none\",\n                        cursor: \"pointer\",\n                    }}>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                }}>\n                    <div style={{\n                        width: \"1em\",\n                        paddingRight: \"1em\",\n                    }}>\n                        {label}\n                    </div>\n                    <div>\n                        {this.props.path[this.props.path.length - 1]}\n                    </div>\n                </div>\n            </button>\n        );\n    }\n}\n\ntype FSBrowserProps = {\n    root: string,\n    onTraverseUp: (path: string[]) => void,\n    onTraverseDown: (path: string[]) => void,\n    onExpandChild: (child: string, fullChildPath: string) => void,\n    browsePath: string[],\n};\n\nenum EditType {\n    CreateFile,\n    CreateDirectory\n}\n\ntype FSBrowserState = {\n    editType: EditType | undefined,\n    editValue: string,\n    selected: string | undefined,\n};\n\nexport class FSBrowser extends React.Component<FSBrowserProps, FSBrowserState> {\n    constructor(props: FSBrowserProps) {\n        super(props);\n\n        this.state = {\n            editType: undefined,\n            editValue: \"\",\n            selected: undefined,\n        };\n    }\n\n    get browsePathString() {\n        return control.bfsSetup.path.join(...this.props.browsePath);\n    }\n\n    get browsingRoot() {\n        return control.bfsSetup.path.join(...this.props.browsePath) ===\n            this.props.root;\n    }\n\n    static compareFSItemPair =\n        (a: [string, FSItem],\n         b: [string, FSItem]): any => {\n        if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    traverseUp = (): void => {\n        const newPath = this.props.browsePath.slice();\n        newPath.pop();\n\n        this.setState({\n            selected: undefined,\n        });\n\n        this.props.onTraverseUp(newPath);\n    };\n\n    traverseDown = (childDirectory: string): void => {\n        const newPath = this.props.browsePath.slice();\n        newPath.push(childDirectory);\n\n        this.setState({\n            selected: undefined,\n        });\n\n        this.props.onTraverseDown(newPath);\n    };\n\n    expandChild = (child: string): void => {\n        const fullChildPath =\n            control.bfsSetup.path.join(this.browsePathString, child);\n        const stats = control.fs.statSync(fullChildPath);\n\n        if (stats.isDirectory()) {\n            this.traverseDown(child);\n        } else if (stats.isFile()) {\n            this.setState({\n                selected: child,\n            });\n\n            this.props.onExpandChild(child, fullChildPath);\n        }\n    }\n\n    createFSItemPair = (filePath: string): [string, any] => {\n        return [\n            filePath,\n            <FSItem key={filePath}\n                    onClick={() => this.expandChild(filePath)}\n                    path={[...this.props.browsePath, filePath]}\n                    selected={filePath === this.state.selected}/>\n        ];\n    };\n\n    toggleEditFile = (): void => {\n        if (this.state.editType === EditType.CreateFile) {\n            this.setState({\n                editType: undefined,\n            });\n        } else {\n            this.setState({\n                editType: EditType.CreateFile,\n            });\n        }\n    };\n\n    toggleEditDirectory = (): void => {\n        if (this.state.editType === EditType.CreateDirectory) {\n            this.setState({\n                editType: undefined,\n            });\n        } else {\n            this.setState({\n                editType: EditType.CreateDirectory,\n            });\n        }\n    };\n\n    handleSubmit = (value: React.SyntheticEvent): void => {\n        value.preventDefault();\n\n        const name = this.state.editValue;\n        const path = control.bfsSetup.path.join(...this.props.browsePath, name);\n\n        if (this.state.editType === EditType.CreateFile) {\n            control.createFile(path);\n        } else {\n            control.createDirectory(path);\n        }\n\n        this.setState({\n            editType: undefined,\n            editValue: \"\",\n        });\n    };\n\n    onChange = (event: React.SyntheticEvent): void => {\n        this.setState({\n            editValue: (event.target as HTMLInputElement).value,\n        });\n    };\n\n    deleteSelected = (): void => {\n        if (this.state.selected === undefined) {\n            control.removeDirectory(this.browsePathString);\n\n            this.traverseUp();\n        } else {\n            control.removeFile(\n                control.bfsSetup.path.join(...this.props.browsePath, this.state.selected))\n\n            this.setState({\n                selected: undefined,\n            });\n        }\n    };\n\n    selectCurrentDirectory = (): void => {\n        this.setState({\n            selected: undefined,\n        });\n    };\n\n    uploadFile = (event: any): void => {\n        const currentDirectory = this.props.browsePath;\n        const file = event.target.files[0];\n\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onload = (e: any) => {\n                const data = e.target.result;\n                const name = file.name;\n\n                control.bfsSetup.fs.writeFileSync(\n                    control.bfsSetup.path.join(...currentDirectory, name),\n                    data);\n\n                this.setState(this.state);\n            };\n\n            reader.readAsText(file);\n        }\n    };\n\n    render() {\n        const editor = this.state.editType !== undefined &&\n                    <div style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                    }}>\n                        <pre style={{\n                            paddingLeft: \"1em\",\n                            paddingRight: \"1em\",\n                        }}>\n                            {this.state.editType === EditType.CreateFile ? (\n                                <div>&#128441; Name</div>\n                            ) : (\n                                <div>&#x1f4c2; Name</div>\n                            )}\n                        </pre>\n                        <form onSubmit={this.handleSubmit}\n                              style={{\n                                  height: \"100%\",\n                                  flexGrow: 1,\n                              }}>\n                            <input type=\"text\"\n                                   value={this.state.editValue}\n                                   onChange={this.onChange}\n                                   style={{\n                                       border: 0,\n                                       padding: 0,\n                                       width: \"100%\",\n                                       height: \"100%\",\n                                   }}>\n                            </input>\n                        </form>\n                    </div>;\n\n        return (\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                    <div className=\"fs-browser-item\"\n                         style={{\n                             display: \"flex\",\n                             flexDirection: \"row\",\n                             height: \"auto\",\n                         }}>\n                        <div onClick={this.selectCurrentDirectory}\n                             style={{\n                                 cursor: \"pointer\",\n                                 fontFamily: \"monospace\",\n                                 display: \"flex\",\n                                 alignItems: \"center\",\n                                 paddingLeft: \"1em\",\n                                 paddingRight: \"1em\",\n                                 background: this.state.selected ? \"none\" : \"darkgray\",\n                             }}>\n                            {this.props.browsePath[this.props.browsePath.length - 1]}\n                        </div>\n                        <div style={{\n                            flexGrow: 1,\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            justifyContent: \"flex-end\",\n                        }}>\n                            <label className=\"fs-browser-item\"\n                                   style={{\n                                       width: \"2.3em\",\n                                       height: \"100%\",\n                                       display: \"flex\",\n                                       justifyContent: \"center\",\n                                       alignContent: \"center\",\n                                       alignItems: \"center\",\n                                   }}>\n                                <input type=\"file\"\n                                       onChange={this.uploadFile}\n                                       style={{\n                                           display: \"none\",\n                                       }}>\n                                </input>&#11193;\n                            </label>\n                            <button className=\"fs-browser-item\"\n                                    onClick={this.toggleEditFile}>\n                                +&#128441;\n                            </button>\n                            <button className=\"fs-browser-item\"\n                                    onClick={this.toggleEditDirectory}>\n                                +&#x1f4c2;\n                            </button>\n                            {this.browsePathString !== this.props.root &&\n                             <button className=\"fs-browser-item\"\n                                     onClick={this.deleteSelected}>\n                            &#10060;\n                             </button>}\n                        </div>\n                    </div>\n                    {editor}\n                    {!this.browsingRoot && (\n                        <FSItem onClick={this.traverseUp}\n                                path={[\"..\"]}\n                                selected={false}>\n                        </FSItem>\n                    )}\n                    {\n                        control.fs\n                               .readdirSync(this.browsePathString)\n                               .map(this.createFSItemPair)\n                               .sort(FSBrowser.compareFSItemPair)\n                               .map((x: [string, FSItem]) => x[1])\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\ntype FontSizeProps = {\n    onIncrease: () => void,\n    onDecrease: () => void,\n    onReset: () => void,\n    size: number,\n};\n\ntype FontSizeState = {};\n\nexport class FontSize extends React.Component<FontSizeProps, FontSizeState> {\n    render() {\n        return (\n            <div className=\"font-size-options\">\n                <button className=\"font-minus\"\n                        onClick={this.props.onDecrease}>\n                    -\n                </button>\n                <button className=\"font-label\"\n                        onClick={this.props.onReset}>\n                    Font ({this.props.size} px)\n                </button>\n                <button className=\"font-plus\"\n                        onClick={this.props.onIncrease}>\n                    +\n                </button>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\ntype FooterProps = {\n    message: string;\n};\ntype FooterState = {};\n\nexport class Footer extends React.Component<FooterProps, FooterState> {\n    render() {\n        return (\n            <div className=\"footer-container\">\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\ntype HeaderProps = {};\ntype HeaderState = {};\n\nexport class Header extends React.Component<HeaderProps, HeaderState> {\n    render() {\n        return (\n            <div className=\"header-container\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\ntype ImageWidgetProps = {\n    image: any\n};\ntype ImageWidgetState = {};\n\nexport class ImageWidget extends React.Component<ImageWidgetProps, ImageWidgetState> {\n  canvas: HTMLCanvasElement | null;\n  constructor(props : ImageWidgetProps) {\n    super(props);\n    this.canvas = null;\n  }\n  componentDidMount() {\n    this.updateCanvas();\n  }\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n  updateCanvas() {\n    const ctx = this.canvas!.getContext('2d');\n    ctx!.clearRect(0, 0, this.props.image.getHeight(), this.props.image.getHeight());\n    this.props.image.render(ctx, 0, 0);\n  }\n  render() {\n      return (\n          <canvas\n            width={this.props.image.getWidth()}\n            height={this.props.image.getHeight()}\n            ref={canvas => this.canvas = canvas}></canvas>\n      )\n  }\n}\n","import React from 'react';\nimport {TableWidget} from './Table';\nimport {ImageWidget} from './Image';\n\ntype InteractionProps = {\n    name: string;\n    value: any;\n    setMessage: (newMessage: string) => void;\n};\n\ntype InteractionState = {};\n\nexport class Interaction extends React.Component<InteractionProps, InteractionState> {\n    convert = (value: any) => {\n        if (value === undefined) {\n            return \"undefined\";\n        } else if (typeof value === 'number') {\n            return value.toString();\n        } else if (typeof value === 'string') {\n            return `\"${value}\"`;\n        } else if (typeof value === 'boolean') {\n            return value.toString();\n        } else if (typeof value === 'function') {\n            // TODO(michael) can we display more info than just <function> ?\n            return \"<function>\";\n        } else if (value.$brand === '$table') {\n            return (\n                <TableWidget headers={value._headers}\n                             rows={value._rows}\n                             htmlify={this.convert}\n                             setMessage={this.props.setMessage}>\n                </TableWidget>\n            );\n        } else if (value.$brand === 'image') {\n            return (\n                <ImageWidget image={value}>\n                </ImageWidget>\n            );\n        } else if (typeof value === 'object') {\n            // TODO(michael) palceholder for better object display\n            return JSON.stringify(value);\n        }\n    };\n\n    render() {\n        if (this.props.name === \"$checks\" || this.props.name === \"$answer\") {\n            return null;\n        }\n\n        return (\n            <div className=\"interaction\">\n                <pre className=\"interaction-identifier\">\n                    {this.props.name} =&nbsp;\n                </pre>\n                {this.convert(this.props.value)}\n            </div>\n        )\n    };\n}\n","import React from 'react';\n\nexport type InteractionErrorProps = {\n    fontSize: number,\n};\n\nexport type InteractionErrorState = {};\n\nexport class InteractionError extends React.Component<InteractionErrorProps, InteractionErrorState> {\n    render() {\n        return (\n            <div className=\"interaction-error\">\n                <p style={{\n                    fontSize: this.props.fontSize,\n                    padding: 0,\n                    margin: 0,\n                }}>\n                    {this.props.children}\n                </p>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\ntype TabProps = {\n    name: any,\n};\n\ntype TabState = {};\n\nexport class Tab extends React.Component<TabProps, TabState> {\n    render() {\n        return <div className=\"menu-content\">{this.props.children}</div>\n    }\n}\n\ntype MenuProps = {};\n\ntype MenuState = {\n    visible: boolean,\n    tab: number,\n};\n\nexport class Menu extends React.Component<MenuProps, MenuState> {\n    constructor(props: MenuProps) {\n        super(props);\n\n        this.state = {\n            visible: false,\n            tab: 0,\n        };\n    }\n\n    toggleTab = (n: number): void => {\n        if (this.state.tab === n) {\n            this.setState({\n                visible: !this.state.visible,\n            });\n        } else {\n            this.setState({\n                tab: n,\n                visible: true,\n            })\n        }\n    };\n\n    render() {\n        const childNodes = Array.isArray(this.props.children) &&\n                           this.props.children.map((tab: any, index: number) => {\n                               return (\n                                   <div className={(\n                                       this.state.visible && this.state.tab === index) ? (\n                                           \"menu-tab-active\"\n                                       ) : (\n                                           \"menu-tab-inactive\"\n                                       )}\n                                        key={index}\n                                        onClick={() => this.toggleTab(index)}>\n                                       {tab.props.name}\n                                   </div>\n                               );\n                           });\n        const content = Array.isArray(this.props.children) &&\n                        this.props.children[this.state.tab];\n        return (\n            <div className=\"menu-container\">\n                <div className=\"menu-tabbar\">\n                    {childNodes}\n                </div>\n                {this.state.visible && content}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'pyret-codemirror-mode/css/pyret.css';\n\n// pyret-codemirror-mode/mode/pyret.js expects window.CodeMirror to exist and\n// to be bound to the 'codemirror' import.\nimport * as RawCodeMirror from 'codemirror';\n(window as any).CodeMirror = RawCodeMirror;\nrequire('pyret-codemirror-mode/mode/pyret');\n\n\ntype SingleCodeMirrorDefinitionsProps = {\n  onEdit: (s: string) => void,\n  highlights: number[][],\n  interactErrorExists: boolean,\n  text: string\n};\ntype SingleCodeMirrorDefinitionsState = {\n  editor: CodeMirror.Editor | null\n};\n\nexport class SingleCodeMirrorDefinitions extends React.Component<SingleCodeMirrorDefinitionsProps, SingleCodeMirrorDefinitionsState> {\n\n  constructor(props : SingleCodeMirrorDefinitionsProps) { super(props); this.state = { editor: null }; }\n\n  componentDidUpdate() {\n    if(this.state.editor !== null) {\n      if (this.props.interactErrorExists) {\n          for (let i = 0; i < this.props.highlights.length; i++) {\n              this.state.editor.getDoc().markText(\n                  { line: this.props.highlights[i][0] - 1,\n                      ch: this.props.highlights[i][1] },\n                  { line: this.props.highlights[i][2] - 1,\n                      ch: this.props.highlights[i][3] },\n                  { className: \"styled-background-error\" });\n          }\n      } else {\n          for (let i = 0; i < this.state.editor.getDoc().getAllMarks().length; i++) {\n              this.state.editor.getDoc().getAllMarks()[i].clear();\n          }\n      }\n    }\n  }\n  onChange = (editor: CodeMirror.Editor, data: CodeMirror.EditorChange, value: string): void => {\n    this.setState({ editor: editor });\n\n    for ( var i = 0; i < editor.getDoc().getAllMarks().length; i++) {\n        editor.getDoc().getAllMarks()[i].clear();\n    }\n    this.props.onEdit(value);\n  }\n\n\n  render() {\n    return (<CodeMirror value={this.props.text}\n      options={{\n        mode: 'pyret',\n        theme: 'default',\n        lineNumbers: true,\n        lineWrapping: true,\n      }}\n      onChange={this.onChange}\n      autoCursor={false}>\n    </CodeMirror>)\n  }\n}\n\n","import React from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\ntype TableWidgetProps = {\n    htmlify: (x: any) => any;\n    headers: string[];\n    rows: any[][];\n    setMessage: (newMessage: string) => void;\n};\ntype TableWidgetState = {};\n\nexport class TableWidget extends React.Component<TableWidgetProps, TableWidgetState> {\n    render() {\n        const data = this.props.rows;\n        const columns = this.props.headers.map(\n            (header: string, index: number) => {\n                return {\n                    id: header,\n                    Header: header,\n                    accessor: (row: any) => {\n                        return this.props.htmlify(row[index]);\n                    }\n                };\n            });\n        const maxRowsPerPage = 5;\n        const showOptions = this.props.rows.length > maxRowsPerPage;\n        const defaultPageSize = showOptions ? maxRowsPerPage : this.props.rows.length;\n        return (\n            <div className=\"table-container\">\n                <CopyToClipboard text={data.map((d) => d.join(\"\\t\")).join(\"\\n\")}\n                                 onCopy={() => this.props.setMessage(\"Copied table data\")}>\n                    <div className=\"table-copy\">\n                        &#128203;\n                    </div>\n                </CopyToClipboard>\n                <ReactTable data={data}\n                            columns={columns}\n                            showPagination={showOptions}\n                            pageSize={defaultPageSize}\n                            showPageSizeOptions={false}\n                            filterable={showOptions}/>\n            </div>\n        );\n    }\n}\n","\nexport interface LintOptions {\n  program: string,\n  programSource: string,\n}\nexport interface CompileOptions {\n  program: string,\n  baseDir: string,\n  builtinJSDir: string,\n  typeCheck: boolean,\n  checks: string,\n  recompileBuiltins: boolean,\n}\n\nexport enum RunKind {\n  Sync = \"SYNC\",\n  Async = \"ASYNC\",\n}\n\nexport interface RunResult {\n  time: number,\n  result: any,\n}\n\nlet compileStart = window.performance.now();\n\n/*\n * Handles Pyret compiler messages ONLY.\n * Ignores all other messages (including BrowserFS messages)\n */\nexport const makeBackendMessageHandler = (\n  echoLog: (l: string) => void,\n  compileFailure: (e: string[]) => void,\n  runtimeFailure: (e: string[]) => void,\n  lintFailure: (data: { name: string, errors: string[]}) => void,\n  lintSuccess: (data: { name: string }) => void,\n  compileSuccess: () => void): ((e: MessageEvent) => null | void) => {\n  const backendMessageHandler = (e: MessageEvent) => {\n    if (e.data.browserfsMessage === true) {\n      return null;\n    }\n\n    try {\n      var msgObject: any = JSON.parse(e.data);\n\n      var msgType = msgObject[\"type\"];\n      if (msgType === undefined) {\n        return null;\n      } else if (msgType === \"echo-log\") {\n        echoLog(msgObject.contents);\n      } else if (msgType === \"lint-failure\") {\n        lintFailure(msgObject.data);\n      } else if (msgType === \"lint-success\") {\n        lintSuccess(msgObject.data);\n      } else if (msgType === \"compile-failure\") {\n        compileFailure(msgObject.data);\n      } else if (msgType === \"compile-success\") {\n        console.log(\"compile-time: \", window.performance.now() - compileStart);\n        compileSuccess();\n      } else {\n        return null;\n      }\n\n    } catch(e) {\n      console.log(e);\n      runtimeFailure(e);\n      return null;\n    }\n  };\n\n  return backendMessageHandler;\n};\n\nexport const lintProgram = (\n  compilerWorker: Worker,\n  options: LintOptions): void => {\n  const message = {\n    _parley: true,\n    options: {\n      program: options.program,\n      \"program-source\": options.programSource,\n      \"lint\": true\n    }\n  };\n\n  compilerWorker.postMessage(message);\n};\n\nexport const compileProgram = (\n  compilerWorker: Worker,\n  options: CompileOptions): void => {\n  compileStart = window.performance.now();\n  const message = {\n    _parley: true,\n    options: {\n      program: options.program,\n      \"base-dir\": options.baseDir,\n      \"builtin-js-dir\": options.builtinJSDir,\n      checks: options.checks,\n      'type-check': options.typeCheck,\n      'recompile-builtins': options.recompileBuiltins,\n    }\n  };\n\n  compilerWorker.postMessage(message);\n};\n\nconst assertNever = (_arg: never): never => {\n  throw new Error('assertNever');\n};\n\nexport const runProgram = (\n  runner: any,\n  baseDir: string,\n  program: string,\n  runKind: RunKind): Promise<RunResult> => {\n  if (runKind === RunKind.Sync) {\n    const start = window.performance.now();\n    const result = runner.makeRequire(baseDir)(program);\n    const end = window.performance.now();\n\n    return Promise.resolve({\n      time: end - start,\n      result: result\n    });\n  } else if (runKind === RunKind.Async) {\n    const entry = runner.makeRequireAsync(baseDir);\n    const resultP = entry(program);\n\n    let wrapper = async function() {\n      const start = window.performance.now();\n      let result = await resultP;\n      const end = window.performance.now();\n\n      return {\n        time: end - start,\n        result: result,\n      };\n    };\n\n    return wrapper();\n  } else {\n    // NOTE(michael): type checking in Typescript on enums is not exhaustive (as of v3.5.3)\n    return assertNever(runKind);\n  }\n};\n","export const BrowserFS = require(\"browserfs\");\n\nexport const fs = BrowserFS.BFSRequire('fs');\n\nexport const path = BrowserFS.BFSRequire('path');\n\nexport const install = (): void => {\n  BrowserFS.install(window);\n};\n\nexport const configure = (worker: Worker, projectsDirectory: string): void => {\n  BrowserFS.configure({\n    fs: \"LocalStorage\"\n  }, function(e: any) {\n    if (e) {\n      throw e;\n    }\n\n    if (!fs.existsSync(projectsDirectory)) {\n      fs.mkdirSync(projectsDirectory);\n    }\n\n    BrowserFS.FileSystem.WorkerFS.attachRemoteListener(worker);\n    (window as any)[\"bfs\"] = BrowserFS.BFSRequire(\"fs\");\n  });\n};\n","import * as bfsSetup from './browserfs-setup';\nimport * as runtimeLoader from './runtime-loader';\nimport * as runner from './runner';\nimport * as backend from './backend';\nimport * as path from './path';\n\nconst runtimeFiles = require('./runtime-files.json');\n\nexport {backend, path, bfsSetup};\n\nexport const worker = new Worker(path.pyretJarr);\n\nexport const installFileSystem = () => {\n  bfsSetup.install();\n  bfsSetup.configure(worker, path.compileBase);\n};\n\nexport const loadBuiltins = (): void => {\n  runtimeLoader.load(bfsSetup.fs, path.compileBuiltinJS, path.uncompiled, runtimeFiles);\n};\n\nexport const runProgram = backend.runProgram;\nexport const compileProgram = backend.compileProgram;\nexport const fs = bfsSetup.fs;\n\nexport const createFile = (file: string): void => {\n  bfsSetup.fs.writeFileSync(file, \"\");\n};\n\nexport const createDirectory = (dir: string): void => {\n  bfsSetup.fs.mkdirSync(dir);\n};\n\nexport const removeFile = (path: string): void => {\n  bfsSetup.fs.unlinkSync(path);\n};\n\n// Synchronous deleteDir\nexport const removeDirectory = (dir: string): void => {\n  const files = bfsSetup.fs.readdirSync(dir);\n\n  files.forEach((file: string) => {\n    const filePath = bfsSetup.path.join(dir, file);\n\n    const stats = bfsSetup.fs.statSync(filePath);\n\n    if (stats.isDirectory()) {\n      removeDirectory(filePath);\n    } else {\n      bfsSetup.fs.unlinkSync(filePath);\n    }\n  });\n\n  bfsSetup.fs.rmdirSync(dir);\n};\n\nexport const deleteDir = (dir: string): void => {\n  bfsSetup.fs.readdir(dir, function(err: any, files: any) {\n    if (err) {\n      throw err;\n    }\n\n    files.forEach(function(file: string) {\n      let filePath = bfsSetup.path.join(dir, file);\n\n      bfsSetup.fs.stat(filePath, function(err: any, stats: any) {\n        if (err) {\n          throw err;\n        }\n\n        if (stats.isDirectory()) {\n          deleteDir(filePath);\n        } else {\n          bfsSetup.fs.unlink(filePath, function(err: any) {\n            if (err) {\n              throw err;\n            }\n          });\n        }\n      });\n    });\n  });\n};\n\nexport const removeRootDirectory = (): void => {\n  deleteDir(path.root);\n};\n\nexport const lint = (\n  programFileName: string,\n  programText: string): void => {\n  backend.lintProgram(\n    worker,\n    {\n      \"program\": programFileName,\n      \"programSource\": programText\n    });\n};\n\n\nexport const compile = (\n  baseDirectory: string,\n  programFileName: string,\n  typeCheck: boolean): void => {\n  backend.compileProgram(\n    worker,\n    {\n      \"program\": programFileName,\n      \"baseDir\": baseDirectory,\n      \"builtinJSDir\": path.compileBuiltinJS,\n      \"checks\": \"none\",\n      \"typeCheck\": typeCheck,\n      \"recompileBuiltins\": false\n    });\n};\n\nexport const run = (\n  baseDirectory: string,\n  programFileName: string,\n  callback: (result: any) => void,\n  runKind: backend.RunKind): void => {\n  backend.runProgram(\n    runner,\n    baseDirectory,\n    programFileName,\n    runKind)\n    .catch((x) => { console.error(x); return {result: {error: String(x.value)}} })\n    .then(callback);\n};\n\nexport const setupWorkerMessageHandler = (\n  onLog: (l: string) => void,\n  onCompileFailure: (e: string[]) => void,\n  onRuntimeFailure: (e: string[]) => void,\n  lintFailure: (data: { name: string, errors: string[]}) => void,\n  lintSuccess: (data: { name: string }) => void,\n  onCompileSuccess: () => void): void => {\n  worker.onmessage = backend.makeBackendMessageHandler(\n    onLog,\n    onCompileFailure,\n    onRuntimeFailure,\n    lintFailure,\n    lintSuccess,\n    onCompileSuccess);\n};\n\nexport const openOrCreateFile = (path: string): string => {\n  if (bfsSetup.fs.existsSync(path)) {\n    return bfsSetup.fs.readFileSync(path, \"utf-8\");\n  } else {\n    bfsSetup.fs.writeFileSync(path, \"\");\n    return \"\";\n  }\n};\n","var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (module.hot) {\n  if (!content.locals) {\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\",\n      function () {\n        var newContent = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.id, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {path} from './browserfs-setup';\n\nexport const root = \"/\";\nexport const compileBase = path.join(root, \"projects\");\nexport const compileBuiltinJS = path.join(root, \"prewritten\");\nexport const compileProgram = \"program.arr\";\nexport const runBase = path.join(root, \"compiled\", \"project\");\nexport const runProgram = \"program.arr.js\";\nexport const uncompiled = path.join(root, \"uncompiled\");\nexport const program = path.join(compileBase, compileProgram);\nexport const pyretJarr = \"pyret.jarr\";\n","const csv = require('csv-parse/lib/sync');\nconst assert = require('assert');\nconst immutable = require('immutable');\nexport const stopify = require('@stopify/stopify');\nconst browserFS = require('./browserfs-setup.ts');\n\n(window as any)[\"stopify\"] = stopify;\n\nconst fs = browserFS.fs;\nconst path = browserFS.path;\n\nconst nodeModules = {\n  'assert': assert,\n  'csv-parse/lib/sync': csv,\n  'fs': browserFS.fs,\n  'immutable': immutable\n};\n\nfunction wrapContent(content: string): string {\n  return `(function() { ${content} })();`;\n}\n\nexport const makeRequireAsync = (\n  basePath: string): ((importPath: string) => Promise<any>) => {\n  let cwd = basePath;\n  let currentRunner: any = null;\n  const cache : {[key:string]: any} = {};\n\n  const requireAsyncMain = (importPath: string) => {\n    return new Promise(function (resolve, reject) {\n      if(importPath in nodeModules) {\n        return (nodeModules as any)[importPath];\n      }\n      const oldWd = cwd;\n      const nextPath = path.join(cwd, importPath);\n      cwd = path.parse(nextPath).dir;\n      if(!fs.existsSync(nextPath)) {\n        throw new Error(\"Path did not exist in requireSync: \" + nextPath);\n      }\n      const stoppedPath = nextPath + \".stopped\";\n      if(stoppedPath in cache) { resolve(cache[stoppedPath]); return; }\n      let runner: any = null;\n      const contents = String(fs.readFileSync(nextPath));\n      const toStopify = wrapContent(contents);\n      runner = stopify.stopifyLocally(toStopify, {});\n      if(runner.kind !== \"ok\") { reject(runner); }\n      fs.writeFileSync(stoppedPath, runner.code);\n      const stopifyModuleExports = {\n        exports: { \n          __pyretExports: nextPath,\n        }\n      };\n      runner.g = Object.assign(runner.g, {\n        document,\n        Number,\n        Math,\n        Array,\n        Object,\n        RegExp,\n        stopify,\n        Error,\n        Image: () => { return new Image(); },\n        decodeURIComponent,\n        require: requireAsync,\n        \"module\": stopifyModuleExports,\n        // TS 'export' syntax desugars to 'exports.name = value;'\n        \"exports\": stopifyModuleExports.exports,  \n        String,\n        $STOPIFY: runner,\n        setTimeout: setTimeout,\n        console: console,\n        parseFloat,\n        isNaN,\n        isFinite\n      });\n      runner.path = nextPath;\n      currentRunner = runner;\n      runner.run((result: any) => {\n        // TODO(Alex): fix stopify bug where evaled result is not passed to AbstractRunner.onDone callback\n        cwd = oldWd;\n        if(result.type !== \"normal\") {\n          reject(result);\n          return;\n        }\n        const toReturn = runner.g.module.exports;\n        cache[stoppedPath] = toReturn;\n        resolve(toReturn);\n      });\n    });\n  };\n\n  const requireAsync = (importPath: string) => {\n    if(importPath in nodeModules) {\n      return (nodeModules as any)[importPath];\n    }\n    const oldWd = cwd;\n    const nextPath = path.join(cwd, importPath);\n    cwd = path.parse(nextPath).dir;\n    if(!fs.existsSync(nextPath)) {\n      throw new Error(\"Path did not exist in requireSync: \" + nextPath);\n    }\n    const stoppedPath = nextPath + \".stopped\";\n    if(stoppedPath in cache) { return cache[stoppedPath]; }\n    currentRunner.pauseK((kontinue: (result: any) => void) => {\n      const lastPath = currentRunner.path;\n      const module = {\n        exports: { \n          __pyretExports: nextPath,\n        }\n      };\n      const lastModule = currentRunner.g.module;\n      currentRunner.g.module = module;\n      // Need to set 'exports' global to work with TS export desugaring\n      currentRunner.g.exports = module.exports;\n      currentRunner.path = nextPath;\n      let stopifiedCode = \"\";\n      if(fs.existsSync(stoppedPath) && (fs.statSync(stoppedPath).mtime > fs.statSync(nextPath).mtime)) {\n        stopifiedCode = String(fs.readFileSync(stoppedPath));\n      }\n      else {\n        const contents = String(fs.readFileSync(nextPath));\n        stopifiedCode = currentRunner.compile(wrapContent(contents));\n        fs.writeFileSync(stoppedPath, stopifiedCode);\n      }\n      currentRunner.evalCompiled(stopifiedCode, (result: any) => {\n        if(result.type !== \"normal\") {\n          kontinue(result);\n          return;\n        }\n        const toReturn = currentRunner.g.module.exports;\n        currentRunner.path = lastPath;\n        // g.exports and g.module may be overwritten by JS code. Need to restore\n        currentRunner.g.module = lastModule;\n        // Need to set 'exports' global to work with TS export desugaring\n        currentRunner.g.exports = lastModule.exports;\n        cache[stoppedPath] = toReturn;\n        kontinue({ type: 'normal', value: toReturn });\n      });\n    });\n  }\n\n  return requireAsyncMain;\n};\n\nexport const makeRequire = (basePath: string): ((importPath: string) => any) => {\n  const cache : {[key:string]: any} = {};\n  var cwd = basePath;\n  /*\n    Recursively eval (with this definition of require in scope) all of the\n    described JavaScript.\n\n    Note that since JS code is generated/written with the assumption that\n    require() is sync, we can only use sync versions of the FS function here;\n    require must be entirely one synchronous run of the code.\n\n    Future use of stopify could enable the definition of requireAsync, which\n    could pause the stack while requiring and then resume.\n  */\n  const requireSync = (importPath: string) => {\n    if(importPath in nodeModules) {\n      return (nodeModules as any)[importPath];\n    }\n    const oldWd = cwd;\n    const nextPath = path.join(cwd, importPath);\n    if(nextPath in cache) { return cache[nextPath]; }\n    cwd = path.parse(nextPath).dir;\n    if(!fs.existsSync(nextPath)) {\n      throw new Error(\"Path did not exist in requireSync: \" + nextPath);\n    }\n    const contents = fs.readFileSync(nextPath);\n    // TS 'export' syntax desugars to 'exports.name = value;'\n    // Adding an 'exports' parameter simulates the global 'exports' variable\n    const f = new Function(\"require\", \"module\", \"exports\", contents);\n    const module = {\n      exports: { \n        __pyretExports: nextPath,\n      }\n    };\n    const result = f(requireSync, module, module.exports);\n    const toReturn = module.exports ? module.exports : result;\n    cwd = oldWd;\n    cache[nextPath] = toReturn;\n    return toReturn;\n  };\n\n  return requireSync;\n};\n","export const load = (\n  fs: any,\n  prewrittenDirectory: string,\n  uncompiledDirectory: string,\n  runtimeFiles: any): void => {\n  if (!fs.existsSync(prewrittenDirectory)) {\n    fs.mkdirSync(prewrittenDirectory);\n  }\n\n  for (var index in runtimeFiles) {\n    var path = runtimeFiles[index].key;\n    var content = runtimeFiles[index].content;\n    var canonicalTimestamp = runtimeFiles[index].timestamp;\n    if (fs.existsSync(path)) {\n      let statResult = fs.statSync(path);\n      let localTimestamp = statResult.mtime.getTime();\n      if (localTimestamp < canonicalTimestamp) {\n        fs.writeFileSync(path, content);\n      }\n\n    } else {\n      fs.writeFileSync(path, content);\n    }\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAmCA;AACA;AACA;AACA;AAFA;AA8IA;AAEA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAIA;AACA;AAXA;AAaA;AACA;AACA;AA3KA;AA6KA;AACA;AAEA;AACA;AACA;AACA;AACA;AApLA;AAsLA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA5LA;AA8LA;AACA;AADA;AAGA;AACA;AAlMA;AAoMA;AACA;AADA;AAGA;AACA;AAxMA;AA0MA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AAUA;AACA;AArNA;AAuNA;AAAA;AAAA;AACA;AACA;AAzNA;AA2NA;AACA;AACA;AA7NA;AA+NA;AACA;AACA;AAjOA;AAmOA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA1OA;AA4OA;AACA;AADA;AAGA;AACA;AAhPA;AAkPA;AACA;AADA;AAGA;AACA;AAtPA;AAwPA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAlQA;AAoQA;AACA;AADA;AAGA;AACA;AAxQA;AA0QA;AACA;AACA;AADA;AAGA;AACA;AACA;AAhRA;AAkRA;AACA;AADA;AAGA;AACA;AAtRA;AAwRA;AACA;AADA;AAGA;AACA;AA5RA;AA8RA;AACA;AADA;AAGA;AACA;AAlSA;AAoSA;AACA;AADA;AAGA;AACA;AArSA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AAEA;AACA;AAFA;AAKA;AAIA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6JA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAncA;AACA;AAocA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAVA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;AC7jBA;AACA;AACA;AACA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AADA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA7EA;AAuGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AApGA;;;;;;;;;;;;;;;;;;AC9HA;AASA;AACA;AACA;AAEA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AApBA;AA0BA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AATA;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AA7CA;AACA;AAsDA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAgCA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAzCA;AA2CA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AApDA;AAsDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AApEA;AAsEA;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AA9EA;AAgFA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AA1FA;AA4FA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAtGA;AAwGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAxHA;AA0HA;AACA;AADA;AAGA;AACA;AA9HA;AAgIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AA7IA;AA+IA;AACA;AADA;AAGA;AACA;AAnJA;AAqJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAtKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAwJA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaeA;AACA;AA1RA;AACA;AADA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3GA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAnBA;;;;;;;;;;;;;;;;;ACXA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AARA;;;;;;;;;;;;;;;;;ACPA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AARA;;;;;;;;;;;;;;;;;ACLA;AAOA;AAEA;AACA;AADA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAzBA;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAUA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AA9BA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AA9CA;;;;;;;;;;;;;;;;;ACZA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAdA;;;;;;;;;;;;;;;;;;ACRA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAaA;AACA;AACA;AACA;AAFA;AAUA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAlBA;AACA;AACA;AAFA;AAIA;AACA;AAcA;AACA;AAEA;AACA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAYA;AAEA;AAAA;AACA;AADA;AAqBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AADA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA5CA;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAjCA;;;;;;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AAEA;;;;;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,eA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;A","sourceRoot":""}