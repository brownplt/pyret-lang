/* NOTE(joe): this file defines both the compact and normal modes for chatitor,
the shared styles explicitly list both modes, and the styles specific to a
mode just list that one. This avoids thinking too hard about rule specificity
and overriding of rules. */

@import './themes/*.css';

:root {
  --success-green: #27cc78;
  --failure-red: #dc4064;
  --outdated-gray: #ccc;
}

/* Button style reset */
.text-button {
  display: inline-block;
  border: none;
  margin: 0;
  padding: 0;
  line-height: normal;
  background-color: transparent;
  cursor: pointer;
}

.chatitor-container {
  display: grid;
  height: 100%;
  grid-template-rows: 1fr 0fr;
}

.progress-bar {
  background-color: var(--success-green);
  transition: width 0.5s linear;
  width: 0;
  height: 0;
  position: absolute;
  /* Above chats but below header */
  z-index: 5;
  box-shadow: 0px 1px 2px rgb(var(--success-green) / 50%);
  will-change: width;
}

.chat-scroll {
  width: 100%;
  overflow: auto;
  display: flex;
  flex-direction: column;
}

.chat-layout-compact .chats,
.chat-layout-normal .chats {
  margin: 2em auto;
}

.chat-layout-compact .chats {
  width: 70em;
  min-width: 40em;
}
.chat-layout-normal .chats {
  min-width: 40em;
  max-width: min(70%, 60em);
}

.chat-layout-compact .chat .CodeMirror,
.chat-layout-normal .chat .CodeMirror {
  /* TODO(luna): !important because they're getting overridden by page styles, as
   * they should be, but why are there page styles, and how can i override
   * correctly? */
  border: 1px solid transparent;
  display: inline-block;
  background-color: #d4f1ff !important;
  min-width: 0em;
  cursor: pointer !important;
  transition: border-radius 0.1s, border-bottom-left-radius 0.1s, min-width 0.1s -0.05s !important;
}

.chat-layout-normal .chat .CodeMirror {
  border-radius: 0.9em !important;
  border-bottom-left-radius: 0 !important;
  padding: 0.2em;
}

.chat-layout-compact .chat .CodeMirror {
  border-radius: 0.3em !important;
  border-bottom-left-radius: 0 !important;
  width: 100%;
}

.chat-layout-compact .chat .CodeMirror-lines,
.chat-layout-normal .chat .CodeMirror-lines {
  cursor: pointer;
}

.chat-layout-compact .chat .CodeMirror-focused,
.chat-layout-normal .chat .CodeMirror-focused {
  background-color: #f2fbff !important;
  min-width: 30em;
  border: 1px solid black;
  filter: opacity(1) !important;
}
.chat-layout-normal .chat .CodeMirror-focused {
  border-radius: 0.5em !important;
  border-bottom-left-radius: 0.5em;
}
.chat-layout-compact .chat .CodeMirror-focused {
  border-radius: 0.1em !important;
  border-bottom-left-radius: 0.1em;
}

.chat-and-result {
  border-left: 2px solid var(--success-green);
  padding-left: 0.5em;
}
.chat-and-result.partially-outdated {
  border-left: 2px dashed var(--outdated-gray);
  padding-left: 0.5em;
}
.chat-and-result.chatitor-error {
  border-left: 2px dashed var(--failure-red);
  padding-left: 0.5em;
}
.chat-layout-compact .chat-and-result {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  position: relative;
}
.chat-layout-normal .chat-and-result {
  display: flex;
  flex-direction: column;
  position: relative;
}

.chat-layout-compact .chat-result {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  max-width: 30%;
}
.chat-layout-normal .chat-result {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin-bottom: 0.3em;
}

.chat-layout-compact .chat-editor-wrapper {
  min-width: 30em;
  max-width: 70%;
}
.chat-layout-normal .chat-editor-wrapper {
  width: 100%;
}

.chat-layout-normal .chat .CodeMirror-focused .CodeMirror-lines {
  cursor: text;
}
.chat-layout-normal .chat.checkmark .CodeMirror::after {
  content: "âœ“";
  display: block;
  position: relative;
  height: 0;
  top: -25px;
  text-align: right;
  color: green;
  margin-right: -1.2em;
}

.failure-cmcode .CodeMirror {
  background-color: transparent !important;
  border: transparent !important;
}

.prompt {
  width: 45em;
  margin: 0 auto;
  position: relative;
}
.send-button {
  font-size: 1.3em;
  position: absolute;
  right: 0;
  z-index: 3;
  bottom: 0;
  line-height: 1em;
  border-radius: 0 0.7em 0.7em 0;
  background-color: rgb(49, 123, 207);
  height: 100%;
  width: 2em;
  color: white;
  font-weight: bold;
}

.new-expr .CodeMirror {
  background-color: white !important;
  /* This is a weird quirk of CodeMirror styles which set this to a value which
   * breaks non-inline positioned elements, but this !important override fixes it */
  border: none;
  border-radius: 1em;
  min-height: 0 !important;
  padding: 1em;
}
.new-expr .CodeMirror-focused {
  border: none;
  border-radius: 1em;
}
.prompt {
  border-radius: 1em !important;
  border: 1px solid black !important;
}
.prompt .react-codemirror2 {
  transition: border-radius 0.1s;
  width: calc(100% - 3.2em);
}

.chat-layout-compact .chatitor-rhs,
.chat-layout-normal .chatitor-rhs {
  padding-left: 1em;
  border-radius: 0.5em;
  background-color: #eee;
  border-bottom-right-radius: 0;
  border: 1px solid transparent;
  margin: 0.15em 0;
  float: right;
  overflow: auto;
}
.chat-layout-compact .chatitor-rhs {
  padding: 0.3em;
  max-width: 100%;
}
.chat-layout-normal .chatitor-rhs {
  padding: 0.4em;
  max-width: 90%;
}

.chat-layout-compact .chatitor-rhs.pending,
.chat-layout-normal .chatitor-rhs.pending {
  background-color: transparent;
}
.chat-layout-compact .partially-outdated .chatitor-rhs,
.chat-layout-normal .partially-outdated .chatitor-rhs {
  border: 1px dashed black;
  filter: opacity(0.7);
}
.chat-layout-compact .outdated .CodeMirror,
.chat-layout-normal .outdated .CodeMirror {
  border: 1px dashed black;
  filter: opacity(0.7);
}
.chat-and-result .chatitor-rhs-error {
  border: 2px solid #dc4064;
}
.chat-and-result.partially-outdated .chatitor-rhs-error {
  border: 2px dashed #dc4064;
}

.chunks-rhs {
  padding-left: 1em;
  /* For positioning jitter */
  border-top: 2px solid rgba(0, 0, 0, 0);
  border-bottom: 2px solid rgba(0, 0, 0, 0);
}
.chunks-rhs-selected {
  background: #d7d4f0;
  border-top: 2px solid #c8c8c8;
  border-bottom: 2px solid #c8c8c8;
}

.list-container > .expander {
  display: none;
}

.expandable > .expander {
  display: inline-block;
}

.list-container.expanded > .expander {
  display: inline-block;
}

.menu-button:active {
  background: darkgrey !important;
}

.loading {
  height: 100%;
  vertical-align: middle;
  text-align: center;
}

.focused-chunk .chunk-menu {
  visibility: visible;
}

.chunk-menu {
  position: absolute;
  visibility: hidden;
  left: -1em;
  background: #eee;
  filter: drop-shadow(2px 2px #ddd);
  z-index: 99;
  height: 1em;
  font-size: 1.25em;
}

.chat-layout-compact .chunk-menu {
  top: -0.5em;
}
.chat-layout-normal .chunk-menu {
  top: -0.5em;
}
.chunk-menu-icon {
  opacity: 0.3;
  transition: opacity 0.2s;
}
.chunk-menu-icon:hover {
  opacity: 1;
}


.chunk-menu-icon .icon {
  width: 1.5em;
  height: 1.5em;
}

.referenced-by-error {
  position: absolute;
  font-size: 1.5em;
  top: 1em;
  left: -1.4em;
}


.examplar-bug-icon {
  width: 3em;
  height: 3em;
  display: inline-flex;
  align-items: center;
  border-radius: 1.5em;
}

.examplar-bug-icon.caught {
  background-color: rgb(44, 139, 219);
}

.examplar-bug-icon.missed {
  background-color: #ddd;
}

.rationalNumber {
  color: #af1180;
}

.rationalRepeat {
  text-decoration: overline;
}

.roughnum {
  color: #af1180;
  height: 1.5em;
  overflow: hidden;
}

.roughnum-start {
  display: inline-block;
  transform: rotate(-15deg) scaleY(3);
  margin-right: 0.125em;
}

.CodeMirror-matchingbracket {
  position: relative;
}

.CodeMirror-matchingbracket::before {
  content: "";
  position: absolute;
  height: 100%;
  width: 100%;
  border: 0px solid var(--matching-brackets);
  z-index: 1000;
}

.CodeMirror-matchingbracket.open::before {
  border-width: 0.3ex 0px 0px 0.3ex;
  border-top-left-radius: 0.4ex;
  margin: -0.3ex;
}

.CodeMirror-matchingbracket.close::before {
  border-width: 0px 0.3ex 0.3ex 0px;
  border-bottom-right-radius: 0.4ex;
  margin: 0.3ex;
}

div.CodeMirror span.CodeMirror-matchingbracket-region {
  position: relative;
  background-color: var(--matching-region-bg);
  border-top: 0.1em solid var(--matching-region-bg);
  border-bottom: 0.1em solid var(--matching-region-bg);
}

div.CodeMirror span.CodeMirror-matchingbracket-region:last-of-type {
    box-shadow: 0.5em 0 0.25em var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket-region:first-of-type {
    box-shadow: -0.5em 0 0.25em var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket-region:first-of-type:last-of-type {
    box-shadow: -0.5em 0 0.25em var(--matching-region-bg), 0.5em 0 0.25em var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket.open {
  box-shadow: -0.3ex 0 0.3ex var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket.open:last-of-type {
  box-shadow: 0.5em 0 0.25em var(--matching-region-bg), -0.3ex 0 0.3ex var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket.close {
  box-shadow: 0.3ex 0 0.3ex var(--matching-region-bg);
}
div.CodeMirror span.CodeMirror-matchingbracket.close:first-of-type {
  box-shadow: -0.5em 0 0.25em var(--matching-region-bg), 0.3ex 0 0.3ex var(--matching-region-bg);
}

/* bold ends of matching bracket regions (unless variables) */
div.CodeMirror span.CodeMirror-matchingbracket:not(.cm-variable) {
  font-weight: 600;
  /* color: initial; */
}

/* ensure keywords, built-ins, & variables retain their color when
  highlighted as matching brackets */
div.CodeMirror span.CodeMirror-matchingbracket.cm-keyword {
  color: var(--keyword);
}
div.CodeMirror span.CodeMirror-matchingbracket.cm-builtin {
  color: var(--built-ins);
}
div.CodeMirror span.CodeMirror-matchingbracket.cm-variable {
  color: var(--variables);
}


div.CodeMirror span.CodeMirror-nonmatchingbracket {
  font-weight: bold;
  background-color: var(--nonmatching-bg-2);
  color: var(--nonmatching-brackets);
}

div.CodeMirror span.CodeMirror-nonmatchingbracket-region {
  background-color: var(--nonmatching-bg);
  border-top: 0.1em solid var(--nonmatching-bg-2);
  border-bottom: 0.1em solid var(--nonmatching-bg-2);
  z-index: 4000;
}

div.directory {
  background: #555;
}